openapi: "3.0.3"
info:
  title: LinkedIn Clone

  version: "1.0.0"
  # description:
servers:
  - url: http://localhost:8080
paths:
  /signup:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user
      requestBody:
        description: Request to create advisor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '409':
            description: Bad Request/User already exists! Login instead
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: User already exists! Login instead
        '404':
          description: 'Not Found: This response is shown if the request for information is not there or it could not be imported'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working
  /login:
    post:
      tags:
        - Users
      summary: Login for existing user
      description: User can login in its account
      requestBody:
        description: Request to match details of user with database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: true
      responses:
        '200':
          description: LoggedIn successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '204':
            description: User not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: User doesn't exists! Signup instead
        '400':
          description: Invalid Email/Password
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Invalid Email/Password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working
  
  /user:
    get:
      tags:
        - Users
      summary: Getting user details
      description: Getting user Details 
      responses:
        '200':
          description: User details found and returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '204':
            description: User not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: User doesn't exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: server not working
  
    put:
      tags:
        - Users
      parameters:
        - name: 'userId'
          in: path
          required: true
          description: The userId of user
          example: 65cb067f1991171ed88ab6de
          schema:
            type: string
      summary: Edit the user details
      description: Updates the user details 
      requestBody:
        description: Request to edit user details body doesn't contain email and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: true
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User details edited successfully.
        '204':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        # '400':
        #   description: Invalid request payload
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           error:
        #             type: string
        #             example: The provided advisorId is not valid, 1234 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /advisors/{advisorId}:
    get:
      summary: Get a advisor's complete information
      description: Returns a advisor's complete information
      operationId: getAdvisorById
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    patch:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Restore deleted advisor
      description: Restores the advisor and set the status to active. Returns a message after restoring the advisor
      responses:
        '200':
          description: Advisor restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor restored successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Delete the advisor
      description: Deletes the advisor and set the status to inactive. Returns a message after deleting the advisor
      requestBody:
        description: Request to delete advisor
        content:
          application/json:
            schema:
              type: object
              properties:
                deletedBy:
                  type: string
                  example: user@zenmonk.tech    
        required: true
      responses:
        '200':
          description: Advisor deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor deleted successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /roles:
    get:
      summary: Get a list of roles
      description: Returns an array containing all the roles
      operationId: getRoles
      tags:
        - Roles
      responses:
        # "200":
          # description: Successful Operation
          # content:
          #   application/json:
          #     schema:
          #       $ref: "#/components/schemas/RolesResponse"
        "204":
          description: No content found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    UserSchema:
      type: object
      properties:
        name:
          type: string
          example: "name"
        email:
          type: string
          format: email
        password:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            suite:
              type: string
            city:
              type: string
            zipcode: 
              type: string
            geo:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
        phone:
          type: string
        profileImage:
          type: string
        website:
          type: string
        company: 
          type: object
          properties:
            name:
              type: string
            catchphrase:
              type: string
            bs:
              type: string
      required:
        - name
        - email
        - password


    postsSchema:
      type: object
      properties:
        userId:
          type: string
          example: 
        title:
          type: string
          example: 
        body:
          type: string
        createdAt:
          type: string
          format: date-time
          example:  2024-02-14T07:21:42.394+00:00
        images:
          type: array
          items: 
            type: string
      required:
        - body
        - title
      
    commentSchema:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string
        body:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
          example: 2024-02-14T07:21:42.394+00:00
      required:
        - body

      
    ReactionSchema:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string
        commentId:
          type: string
        emoji:
          type: string
          enum:
             - Like
             - Celebrate
             - Support
             - Love
             - Insightful
             - Funny 
        createdAt:
          type: string
          format: date-time
          example: 2024-02-14T07:21:42.394+00:00


            