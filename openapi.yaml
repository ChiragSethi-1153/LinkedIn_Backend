openapi: "3.0.3"
info:
  title: LinkedIn Clone

  version: "1.0.0"
  # description:
servers:
  - url: http://localhost:8080
paths:
  /signup:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user
      requestBody:
        description: Request to create advisor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '409':
            description: Bad Request/User already exists
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: The provided email already exists
        '404':
          description: 'Not Found: This response is shown if the request for information is not there or it could not be imported'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    get:
      summary: Get a list of advisors
      description: Returns an array containing all the advisors
      operationId: getAdvisors
      tags:
        - Advisors
      parameters:
        - name: "name"
          in: query
          example: Jhon Doe
          description: "Advisor name"
          schema:
            type: string
        - name: "status"
          in: query
          description: "Advisor's status"
          example: active
          schema:
            type: string
            enum:
              - active
              - inactive
        - name: "archive"
          in: query
          description: "Show and hide deleted advisors"
          example: true
          schema:
            type: boolean
            enum:
              - true
              - false
        - name: institute
          in: query
          description: Assigned institute of advisor
          example: FBR,UEA
          schema:
            type: string 
        - name: "limit"
          in: "query"
          description: Limit the results provided to this value. 10 is the default value, 50 is the maximum per page.
          example: 10
          schema:
            type: integer
            default: 10
        - name: "page"
          in: "query"
          description: Paginating by page, 10 items(limit) per page (10 results, page 2)
          example: 1
          schema:
            type: integer
            default: 1
        - name: "order"
          in: query
          description: Columns sort by ascending and descending orders
          example: name,desc
          schema:
            type: string
            default: updateAt,desc
      responses:
        # "200":
        #   description: Successful Operation
        #   content:
        #     application/json:
        #       schema:
        #         $ref: "#/components/schemas/AdvisorsResponse"
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /advisors/{advisorId}:
    get:
      summary: Get a advisor 's complete information
      description: Returns a advisor's complete information
      operationId: getAdvisorById
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    patch:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Restore deleted advisor
      description: Restores the advisor and set the status to active. Returns a message after restoring the advisor
      responses:
        '200':
          description: Advisor restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor restored successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Edit the advisor
      description: Updates the advisor
      # requestBody:
      #   description: Request to edit advisor
        # content:
        #   application/json:
        #     schema:
        #       $ref: '#/components/schemas/EditAdvisorRequest'
        # required: true
      responses:
        '200':
          description: Advisor updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor edited successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Delete the advisor
      description: Deletes the advisor and set the status to inactive. Returns a message after deleting the advisor
      requestBody:
        description: Request to delete advisor
        content:
          application/json:
            schema:
              type: object
              properties:
                deletedBy:
                  type: string
                  example: user@zenmonk.tech    
        required: true
      responses:
        '200':
          description: Advisor deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor deleted successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /roles:
    get:
      summary: Get a list of roles
      description: Returns an array containing all the roles
      operationId: getRoles
      tags:
        - Roles
      responses:
        # "200":
          # description: Successful Operation
          # content:
          #   application/json:
          #     schema:
          #       $ref: "#/components/schemas/RolesResponse"
        "204":
          description: No content found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    UserSchema:
      type: object
      properties:
        name:
          type: string
          example: "name"
        email:
          type: string
          format: email
        password:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            suite:
              type: string
            city:
              type: string
            zipcode: 
              type: string
            geo:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
        phone:
          type: string
        profileImage:
          type: string
        website:
          type: string
        company: 
          type: object
          properties:
            name:
              type: string
            catchphrase:
              type: string
            bs:
              type: string
      required:
        - name
        - email
        - password


    postsSchema:
      type: object
      properties:
        userId:
          type: string
          example: 
        title:
          type: string
          example: 
        body:
          type: string
        createdAt:
          type: string
          format: date-time
          example:  2024-02-14T07:21:42.394+00:00
        images:
          type: array
          items: 
            type: string
      required:
        - body
        - title
      
    commentSchema:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string
        body:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
          example: 2024-02-14T07:21:42.394+00:00
      required:
        - body

      
    ReactionSchema:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string
        commentId:
          type: string
        emoji:
          type: string
          enum:
             - Like
             - Celebrate
             - Support
             - Love
             - Insightful
             - Funny 
        createdAt:
          type: string
          format: date-time
          example: 2024-02-14T07:21:42.394+00:00


            